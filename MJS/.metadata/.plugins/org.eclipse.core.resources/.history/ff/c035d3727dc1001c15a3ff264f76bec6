package dao;

import java.sql.*;
import java.util.ArrayList;
import java.util.Date;

import javax.naming.NamingException;

import dto.ProductDTO;
import dto.UserDTO;
import util.ConnectionPool;

public class ProductDAO {

	public ArrayList<ProductDTO> getList() throws NamingException, SQLException {

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			String sql = "SELECT * FROM product ";

			conn = ConnectionPool.get();
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();

			ArrayList<ProductDTO> products = new ArrayList<ProductDTO>();

			while (rs.next()) {
				products.add(new ProductDTO(rs.getInt("id"), 
											rs.getString("name"), 
											rs.getInt("price"),
											rs.getString("image")));
			}
			return products;

		} finally {
			if (rs != null)
				rs.close();
			if (pstmt != null)
				pstmt.close();
			if (conn != null)
				conn.close();
		}
	}

	public ProductDTO getDetail(String id) throws NamingException, SQLException {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			String sql = "SELECT * FROM Product WHERE id = ? AND status=1 ";

			conn = ConnectionPool.get();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, id);
			rs = pstmt.executeQuery();
			rs.next();

			ProductDTO product = new ProductDTO(rs.getInt("id"), 
												rs.getString("name"), 
												rs.getInt("price"),
												rs.getString("image"));

			return product;

		} finally {
			if (rs != null)
				rs.close();
			if (pstmt != null)
				pstmt.close();
			if (conn != null)
				conn.close();
		}
	}

	// 상품 추가
	public int insertProduct(String name, int price, String image
			) throws NamingException, SQLException {

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int id = 0;
		try {
			String sql = "INSERT INTO Product (name, price, image) "
					+ "VALUES (?,?,?) ";
			conn = ConnectionPool.get();
			pstmt = conn.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
			pstmt.setString(1, name);
			pstmt.setInt(2, price);
			pstmt.setString(3, image);

			pstmt.executeUpdate(); // db에 insert하기

			rs = pstmt.getGeneratedKeys(); // insert를 하고 나서 밖에서는 db 기본키 값 auto increasement로 뭐가 들어갔는지 안보여서 함수로 확인
			if (rs.next()) {
				id = rs.getInt(1); // id 기본키 값을 반환
			}
			return id;

		} finally {

			if (pstmt != null)
				pstmt.close();
			if (conn != null)
				conn.close();
		}
	}

}
